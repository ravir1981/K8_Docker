Labels and Selectors
==============


kind: Pod
apiVersion: v1
metadata:
  name: labeltestpod
  labels:                                                   
    env: development
    class: pods
	depart: test
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Learning Labels & Selector; sleep 4 ; done"]

kubectl apply -f <pod.yml>
kubectl get pods --show-labels

kubectl label pods labeltestpod Company=Techstart
kubectl get pods --show-labels

Now, list pods matching a label
kubectl get pods -l env=development
kubectl get pods -l env!=development
kubectl delete pod -l env!=development
kubectl get pods


Equality Based: ( =, !=)

Set Based: ( in, notin and exists)

env in (production, dev)
env notin ( class1, class2)

kubectl get pods -l 'env in (dev, testing)'
kubectl get pods -l 'env notin (dev, testing)'
kubectl get pods -l class=pods, Company=Techstart



EXAMPLE OF LABELS


kind: Pod
apiVersion: v1
metadata:
  name: 
  labels:                                                   
    env: 
    class: pods
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Learning Labels & Selectors; sleep 5 ; done"]



***************************************************************************
NODE SELECTOR EXAMPLE

kind: Pod
apiVersion: v1
metadata:
  name: nodelabels
  labels:
    env: development
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Learning Node Selector; sleep 5 ; done"]
    nodeSelector:                                         
       hardware: t2-medium
*****************************************************************************************************
EXAMPLE OF REPLICATION CONTROLLER

kind: ReplicationController ==> This defines the creation of an object.           
apiVersion: v1
metadata:
  name: myreplica
spec:
  replicas: 2    			==> This element defines the desired number of PODs.        
  selector:      			==> This elemetn tells the controller which PODs to watch.   
    myname: RCTest 			==> This label must be matched with the labels of the POD, whose replica needs to be created.                           
  template:          		==> This element defines a template to launch a new POD      
    metadata:
      name: testpod6
      labels:            
        myname: RCTest 		==> If this label matches the selector label, then ReplicatorController will create two replicas of this POD.
    spec:
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Learning ReplicationController; sleep 5 ; done"]


- kubectl apply -f replica.yml
- kubectl get rc
- kubectl describe rc myreplica
- kubectl get pods -o wide
- kubectl get rc --show-labels
- kubectl get pods --show-labels
- kubectl delete pod myreplica-5swjd
- watch kubectl get pods
- kubectl describe rc myreplica
****************************************************************************************************************
EXAMPLE OF REPLICA SET


kind: ReplicaSet                                    
apiVersion: apps/v1                            
metadata:
  name: myrepset
spec:
  replicas: 2  
  selector:                  
    matchExpressions:                             
      - {key: env, operator: In, values: [test, preprod, prod]}
  template:      
    metadata:
      name: Replicasetpod
      labels:              
        env: preprod
    spec:
     containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Learning ReplicaSet; sleep 5 ; done"]


**************************************END*****************************
Node Selector
=============

One use case for selecting labels is to contrain the set of nodes into which a POD can schedule. i.e. 
you can tell a pod to only be able to run on a particular nodes.

Generally such contraints are unnecessary as the scheduler will automatically do a reasonable placement, but on certain circumstances we might need it.

We can use labels to tag nodes as well.

When the nodes are tagged, you can use the label selectors to specify the pods to run only on specific nodes.

First we will get labels to the nodes.

Then use the node selector to the pod configuration.


Kubernetes was designed to orchestrate multiple containers and replication.



ReplicaSet: A ReplicaSet's purpose is to maintain a stable set of replica Pods running at any given time. As such, it is often used to guarantee the availability of a specified number of identical Pods.

ReplicaSet is the next generation of ReplicationController.

The ReplicationController only supports equality based selectors whereas, the Replicaset supports set based selector i.e. filtering according to set of values.
























