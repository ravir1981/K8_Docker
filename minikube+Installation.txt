Minikube Cluster Setup
================

# sudo su

Update the system

# apt-get update

Now install docker

# apt -y install docker.io

Download & Install Kubectl

https://kubernetes.io/releases/

https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

# curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
# which kubectl
# kubectl version

Install Minikube

https://minikube.sigs.k8s.io/docs/start/

# curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/

To run a minikube, it requires one supportrd file, lets install it as well.

# apt install conntrack

# minikube start --vm-driver=none

# minikube status

# kubectl version

# kubectl get nodes

# kubectl describe node ip-XXX-XX-XX-XX

***************************************************************************



apt-get update
apt -y install docker.io
curl -LO https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl
install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client
r=https://api.github.com/repos/kubernetes/minikube/releases
curl -LO $(curl -s $r | grep -o 'http.*download/v.*beta.*/minikube-linux-amd64' | head -n1)
sudo install minikube-linux-amd64 /usr/local/bin/minikube
minikube start --vm-driver=none	
apt install conntrack
minikube start --vm-driver=none	



==========================


for kind in `kubectl api-resources | tail +2 | awk '{ print $1 }'`; do kubectl explain $kind; done | grep -e "KIND:" -e "VERSION:"


Creating my first POD

vim pod1.yml

kind: Pod    # Pod is the object here                          
apiVersion: v1              # Generally version is 1       
metadata:                      #     If you want to give any name about the pod then do it inside the metadata
  name: testpod                  
spec:                                    
  containers:                      
    - name: cont1    # Name of my container                 
      image: ubuntu           # Image of Ubuntu   
      command: ["/bin/bash", "-c", "touch /tmp/test.log ; while true; do date ; echo Hello How are you; sleep 5 ; done"]
  restartPolicy: Never         # Defaults to Always

# kubectl apply -f pod1.yml or kubectl create as well

o/p -> pod/testpod created

# kubectl get pods

testpod 1/1 running 0 ==> 1/1 means only one container is running inside the pod.

If you want to see, where exactly your pod is running

# kubectl get pods -o wide

# kubectl describe pod testpod
or
# kubectl describe pod/testpod
Both commands are same.

# kubectl logs -f testpod 

Suppose more than one container is running inside the pod then how to check the logs of a specific container

# kubectl logs -f testpod -c c00
or
# kubectl logs -f testpod -c c01

If you want to delete pod

# kubectl delete pod testpod
or
# kubectl delete -f pod1.yml

# kubectl get pods
Now no pods available on the system.

************************************************************************************************************************************

MULTI CONTAINER POD ENVIRONMENT 

kind: Pod
apiVersion: v1
metadata:
  name: testpod3
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello how are you?; sleep 5 ; done"]
    - name: c01
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello how are you?; sleep 5 ; done"]


*********************************************************************************************************************************
POD ENVIRONMENT  VARIABLES


kind: Pod
apiVersion: v1
metadata:
  name: environments
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello; sleep 5 ; done"]
      env:                        # List of environment variables to be used inside the pod
      - name: MYNAME
        value: BHUPINDER

************************************************************************************************************************************
POD WITH PORTS

kind: Pod
apiVersion: v1
metadata:
  name: testpod4
spec:
  containers:
    - name: c00
      image: httpd
      ports:
       - containerPort: 80  

kubectl apply -f port.yaml
kubectl logs mypod1
kubectl get pod -o wide
curl 10.244.0.14:80

*********************************************************************

POD WITH MULTIPLE CONTAINER WITH ANNOTATION

kind: Pod
apiVersion: v1
metadata:
  name: testpod1
  annotations:
    description: This is my third pod
spec:
  containers:
    - name: cont05
      image: ubuntu
      command: ["/bin/bash", "-c", "touch /tmp/test.log ; while true; do date ; echo This is Ravi creating third pod - cont05; sleep 5 ; done"]
      env:
        - name: Myname
          value: Ravi
    - name: cont06
      image: ubuntu
      command: ["/bin/bash", "-c", "touch /tmp/test.log ; while true; do date ; echo This is Ravi creating third pod with cont06; sleep 5 ; done"]
      env:
        - name: City
          value: Avon
  restartPolicy: Never
************************END******************************************
